{
  // Specification Templates
  "Spec Kit Specification": {
    "prefix": "spec",
    "body": [
      "name: ${1:Feature Name}",
      "version: 1.0.0",
      "description: |",
      "  ${2:Detailed description of the feature}",
      "",
      "requirements:",
      "  functional:",
      "    - id: F001",
      "      description: ${3:First functional requirement}",
      "      priority: high",
      "      acceptance_criteria:",
      "        - ${4:Measurable criterion}",
      "    - id: F002",
      "      description: ${5:Second functional requirement}",
      "      priority: medium",
      "      acceptance_criteria:",
      "        - ${6:Measurable criterion}",
      "",
      "  non_functional:",
      "    - id: NF001",
      "      description: ${7:Performance requirement}",
      "      metric: ${8:response_time < 200ms}",
      "",
      "user_scenarios:",
      "  - id: US001",
      "    actor: ${9:User}",
      "    action: ${10:performs an action}",
      "    outcome: ${11:expected result}",
      "",
      "technical_notes:",
      "  - ${12:Important technical consideration}",
      "",
      "dependencies:",
      "  - ${13:External dependency}",
      "",
      "[NEEDS CLARIFICATION]:",
      "  - ${14:Ambiguous requirement needing discussion}"
    ],
    "description": "Complete spec kit specification template"
  },

  "Spec Kit Plan": {
    "prefix": "plan",
    "body": [
      "specification: specs/${1:001}/spec.yml",
      "name: ${2:Implementation Plan}",
      "version: 1.0.0",
      "generated: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}",
      "",
      "overview: |",
      "  ${3:High-level implementation approach}",
      "",
      "architecture:",
      "  patterns:",
      "    - ${4:Design pattern to use}",
      "  components:",
      "    - name: ${5:Component Name}",
      "      responsibility: ${6:What it does}",
      "      interfaces:",
      "        - ${7:API or interface}",
      "",
      "technology_stack:",
      "  backend:",
      "    - ${8:Python/FastAPI}",
      "  frontend:",
      "    - ${9:React/TypeScript}",
      "  database:",
      "    - ${10:PostgreSQL}",
      "",
      "phases:",
      "  - phase: 1",
      "    name: ${11:Foundation}",
      "    duration: ${12:2 days}",
      "    deliverables:",
      "      - ${13:Core models}",
      "  - phase: 2",
      "    name: ${14:Implementation}",
      "    duration: ${15:3 days}",
      "    deliverables:",
      "      - ${16:API endpoints}",
      "",
      "risks:",
      "  - risk: ${17:Potential risk}",
      "    mitigation: ${18:How to handle it}",
      "",
      "constitution_compliance:",
      "  - principle: ${19:Library-first}",
      "    implementation: ${20:Using established libraries}"
    ],
    "description": "Spec kit implementation plan template"
  },

  "Spec Kit Tasks": {
    "prefix": "tasks",
    "body": [
      "plan: specs/${1:001}/plan.yml",
      "name: ${2:Task Breakdown}",
      "version: 1.0.0",
      "generated: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}",
      "",
      "tasks:",
      "  - id: T001",
      "    name: ${3:Setup project structure}",
      "    description: |",
      "      ${4:Initialize repository and basic configuration}",
      "    requirements: [F001]",
      "    estimated_hours: ${5:2}",
      "    dependencies: []",
      "    can_parallel: false",
      "",
      "  - id: T002",
      "    name: ${6:Create data models}",
      "    description: |",
      "      ${7:Define database schema and domain models}",
      "    requirements: [F001, F002]",
      "    estimated_hours: ${8:4}",
      "    dependencies: [T001]",
      "    can_parallel: false",
      "",
      "  - id: T003",
      "    name: ${9:Implement API endpoints}",
      "    description: |",
      "      ${10:Create REST API with validation}",
      "    requirements: [F002, F003]",
      "    estimated_hours: ${11:6}",
      "    dependencies: [T002]",
      "    can_parallel: true",
      "",
      "  - id: T004",
      "    name: ${12:Write tests}",
      "    description: |",
      "      ${13:Unit and integration tests}",
      "    requirements: [all]",
      "    estimated_hours: ${14:4}",
      "    dependencies: [T003]",
      "    can_parallel: true",
      "",
      "task_groups:",
      "  setup: [T001]",
      "  backend: [T002, T003]",
      "  testing: [T004]",
      "",
      "parallelization_notes: |",
      "  ${15:T003 and T004 can be worked on simultaneously by different developers}"
    ],
    "description": "Spec kit task breakdown template"
  },

  "Functional Requirement": {
    "prefix": "freq",
    "body": [
      "- id: F${1:003}",
      "  description: ${2:Requirement description}",
      "  priority: ${3|high,medium,low|}",
      "  acceptance_criteria:",
      "    - ${4:Testable criterion}",
      "    - ${5:Another criterion}"
    ],
    "description": "Add a functional requirement"
  },

  "Non-Functional Requirement": {
    "prefix": "nfreq",
    "body": [
      "- id: NF${1:002}",
      "  description: ${2:Performance/Security requirement}",
      "  category: ${3|performance,security,usability,reliability|}",
      "  metric: ${4:Measurable metric}",
      "  threshold: ${5:Acceptable value}"
    ],
    "description": "Add a non-functional requirement"
  },

  "User Scenario": {
    "prefix": "scenario",
    "body": [
      "- id: US${1:002}",
      "  actor: ${2:User role}",
      "  precondition: ${3:Initial state}",
      "  action: ${4:What the user does}",
      "  outcome: ${5:Expected result}",
      "  postcondition: ${6:Final state}"
    ],
    "description": "Add a user scenario"
  },

  "Task Definition": {
    "prefix": "task",
    "body": [
      "- id: T${1:005}",
      "  name: ${2:Task name}",
      "  description: |",
      "    ${3:Detailed task description}",
      "  requirements: [${4:F001, F002}]",
      "  estimated_hours: ${5:4}",
      "  dependencies: [${6:T001, T002}]",
      "  can_parallel: ${7|true,false|}",
      "  assigned_to: ${8:developer}",
      "  status: ${9|pending,in_progress,completed,blocked|}"
    ],
    "description": "Add a task definition"
  },

  "Needs Clarification": {
    "prefix": "clarify",
    "body": [
      "[NEEDS CLARIFICATION]: ${1:Question or ambiguity that needs resolution}"
    ],
    "description": "Mark something that needs clarification"
  },

  "Constitution Reference": {
    "prefix": "constitution",
    "body": [
      "# Per constitution.md: ${1:principle}",
      "# Implementation: ${2:how this follows the principle}"
    ],
    "description": "Reference constitution principle"
  },

  "API Endpoint Spec": {
    "prefix": "apispec",
    "body": [
      "- endpoint: ${1:/api/resource}",
      "  method: ${2|GET,POST,PUT,DELETE,PATCH|}",
      "  description: ${3:What this endpoint does}",
      "  request:",
      "    headers:",
      "      - Authorization: Bearer {token}",
      "    body:",
      "      type: ${4:application/json}",
      "      schema:",
      "        ${5:field}: ${6:string}",
      "  response:",
      "    success:",
      "      status: ${7:200}",
      "      body:",
      "        ${8:field}: ${9:value}",
      "    errors:",
      "      - status: ${10:400}",
      "        message: ${11:Invalid request}"
    ],
    "description": "API endpoint specification"
  },

  "Test Specification": {
    "prefix": "testspec",
    "body": [
      "- test_id: TEST_${1:F001_001}",
      "  requirement: ${2:F001}",
      "  description: ${3:Test description}",
      "  type: ${4|unit,integration,e2e|}",
      "  setup:",
      "    - ${5:Precondition}",
      "  steps:",
      "    - ${6:Action to perform}",
      "    - ${7:Another action}",
      "  expected:",
      "    - ${8:Expected outcome}",
      "  teardown:",
      "    - ${9:Cleanup action}"
    ],
    "description": "Test case specification"
  },

  "Dependency Declaration": {
    "prefix": "dep",
    "body": [
      "dependencies:",
      "  - name: ${1:library_name}",
      "    version: ${2:^1.0.0}",
      "    purpose: ${3:Why this is needed}",
      "    alternatives_considered:",
      "      - ${4:Other option}",
      "    justification: ${5:Why this was chosen}"
    ],
    "description": "Declare a dependency with justification"
  },

  "Architecture Decision": {
    "prefix": "arch",
    "body": [
      "# Architecture Decision: ${1:Title}",
      "## Context",
      "${2:Background and problem}",
      "",
      "## Decision",
      "${3:What was decided}",
      "",
      "## Rationale",
      "${4:Why this approach}",
      "",
      "## Consequences",
      "### Positive",
      "- ${5:Good outcome}",
      "",
      "### Negative",
      "- ${6:Trade-off}",
      "",
      "## Alternatives Considered",
      "- ${7:Other option}: ${8:Why not chosen}"
    ],
    "description": "Architecture decision record"
  },

  "Phase Definition": {
    "prefix": "phase",
    "body": [
      "- phase: ${1:3}",
      "  name: ${2:Phase Name}",
      "  duration: ${3:5 days}",
      "  goals:",
      "    - ${4:Primary objective}",
      "  deliverables:",
      "    - ${5:Concrete output}",
      "  success_criteria:",
      "    - ${6:How to measure completion}",
      "  dependencies:",
      "    - ${7:Previous phase or external factor}"
    ],
    "description": "Project phase definition"
  },

  "Risk Assessment": {
    "prefix": "risk",
    "body": [
      "- risk: ${1:Risk description}",
      "  probability: ${2|low,medium,high|}",
      "  impact: ${3|low,medium,high|}",
      "  mitigation: ${4:How to prevent or handle}",
      "  contingency: ${5:Backup plan if it occurs}",
      "  owner: ${6:Responsible person}"
    ],
    "description": "Risk assessment entry"
  }
}
